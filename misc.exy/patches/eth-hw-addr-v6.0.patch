diff --git a/drivers/net/usb/smsc95xx.c b/drivers/net/usb/smsc95xx.c
index bfb58c91db04..a658daf5c18c 100644
--- a/drivers/net/usb/smsc95xx.c
+++ b/drivers/net/usb/smsc95xx.c
@@ -54,6 +54,7 @@
 #define SUSPEND_SUSPEND3		(0x08)
 #define SUSPEND_ALLMODES		(SUSPEND_SUSPEND0 | SUSPEND_SUSPEND1 | \
 					 SUSPEND_SUSPEND2 | SUSPEND_SUSPEND3)
+#define MAC_ADDR_LEN                    (6)
 
 #define SMSC95XX_NR_IRQS		(1) /* raise to 12 for GPIOs */
 #define PHY_HWIRQ			(SMSC95XX_NR_IRQS - 1)
@@ -78,6 +79,10 @@ static bool turbo_mode = true;
 module_param(turbo_mode, bool, 0644);
 MODULE_PARM_DESC(turbo_mode, "Enable multiple frames per Rx transaction");
 
+static char *macaddr = ":";
+module_param(macaddr, charp, 0);
+MODULE_PARM_DESC(macaddr, "MAC address");
+
 static int __must_check smsc95xx_read_reg(struct usbnet *dev, u32 index,
 					  u32 *data)
 {
@@ -761,10 +766,60 @@ static int smsc95xx_ioctl(struct net_device *netdev, struct ifreq *rq, int cmd)
 	return phy_mii_ioctl(netdev->phydev, rq, cmd);
 }
 
+/* Check the macaddr module parameter for a MAC address */
+static int smsc95xx_is_macaddr_param(struct usbnet *dev)
+{
+        int i, j, got_num, num;
+        u8 mtbl[MAC_ADDR_LEN];
+
+        if (macaddr[0] == ':')
+                return 0;
+
+        i = 0;
+        j = 0;
+        num = 0;
+        got_num = 0;
+        while (j < MAC_ADDR_LEN) {
+                if (macaddr[i] && macaddr[i] != ':') {
+                        got_num++;
+                        if ('0' <= macaddr[i] && macaddr[i] <= '9')
+                                num = num * 16 + macaddr[i] - '0';
+                        else if ('A' <= macaddr[i] && macaddr[i] <= 'F')
+                                num = num * 16 + 10 + macaddr[i] - 'A';
+                        else if ('a' <= macaddr[i] && macaddr[i] <= 'f')
+                                num = num * 16 + 10 + macaddr[i] - 'a';
+                        else
+                                break;
+                        i++;
+                } else if (got_num == 2) {
+                        mtbl[j++] = (u8) num;
+                        num = 0;
+                        got_num = 0;
+                        i++;
+                } else {
+                        break;
+                }
+        }
+
+        if (j == MAC_ADDR_LEN) {
+                netif_dbg(dev, ifup, dev->net, "Overriding MAC address with: "
+                "%02x:%02x:%02x:%02x:%02x:%02x\n", mtbl[0], mtbl[1], mtbl[2],
+                                                mtbl[3], mtbl[4], mtbl[5]);
+                eth_hw_addr_set(dev->net, mtbl);
+                return 1;
+        } else {
+                return 0;
+        }
+}
+
 static void smsc95xx_init_mac_address(struct usbnet *dev)
 {
 	u8 addr[ETH_ALEN];
 
+	/* Check module parameters */
+	if (smsc95xx_is_macaddr_param(dev))
+		return;
+
 	/* maybe the boot loader passed the MAC address in devicetree */
 	if (!platform_get_ethdev_address(&dev->udev->dev, dev->net)) {
 		if (is_valid_ether_addr(dev->net->dev_addr)) {
